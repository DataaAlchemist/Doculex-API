name: Doculex AI API Deployment

on:
    push:
      branches:
        - main

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v2

            - name: Login to Docker Hub
              uses: docker/login-action@v1
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

            - name: Install Go
              uses: actions/setup-go@v2
              with:
                go-version: 1.20.5
            
            - name: Debug Environment Variables
              run: |
                echo "DOCKER_USERNAME: $DOCKER_USERNAME"
                echo "DOCKER_ACCESS_TOKEN: $DOCKER_ACCESS_TOKEN"
                echo "IMAGE_NAME: $IMAGE_NAME"
              env:
                DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
                DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
                IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/doculex-ai-api:latest
                

            - name: Setup Docker BuildX
              uses: docker/setup-buildx-action@v1

            - name: Build Docker Image
              run: |
                docker buildx create --use 
                docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/doculex-ai-api:latest .
              env:
                IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/doculex-ai-api:latest

            - name: Push Docker Image
              run: |
                docker push ${{ secrets.DOCKER_USERNAME }}/doculex-ai-api:latest
              env:
                IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/doculex-ai-api:latest

    deployment:
        needs: release
        runs-on: ubuntu-latest
        steps:
            - name: Deployment to VPS
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.HOST }}
                username: ${{ secrets.USERNAME }}
                key: ${{ secrets.PRIVATE_KEY }}
                port: ${{ secrets.PORT }}
                script: |
                    docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
                    docker-compose pull
                    docker-compose up -d 
